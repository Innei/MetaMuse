// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output = "./client"
}

generator zod {
  provider = "nestjs-zod-prisma"
  output   = "./schemas" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  generateDto = true // (default) Generate DTOs for NestJS

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  dtoCase = "PascalCase" // (default) Output DTOs using pascal case (ex. UserDto, PostDto)
  // dtoCase             = "camelCase" // Output DTOs using camel case (ex. userDto, postDto)

  dtoSuffix = "Dto" // (default) Suffix to apply to your prisma models when naming DTOs

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

// generator zod {
//   provider                         = "zod-prisma-types"
//   output                           = "../src/generated/zod" // default is ./generated/zod
//   useMultipleFiles                 = true // default is false
//   writeBarrelFiles                 = false // default is true
//   createInputTypes                 = true // default is true
//   createModelTypes                 = true // default is true
//   addInputTypeValidation           = true // default is true
//   addIncludeType                   = false // default is true
//   addSelectType                    = false // default is true
//   validateWhereUniqueInput         = false // default is false
//   createOptionalDefaultValuesTypes = true // default is false
//   createRelationValuesTypes        = true // default is false
//   createPartialTypes               = true // default is false
//   useDefaultValidators             = true // default is true
//   coerceDate                       = true // default is true
//   writeNullishInModelTypes         = true // default is false
//   prismaClientPath                 = "./path/to/prisma/client" // default is client output path
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default("")
  username      String    @unique @db.VarChar(80)
  name          String    @db.VarChar(80)
  introduce     String?   @db.VarChar(255)
  avatar        String?   @db.VarChar(1024)
  password      String    @db.VarChar(80)
  mail          String?   @db.VarChar(80)
  url           String?   @db.VarChar(1024)
  lastLoginTime DateTime? @map("last_login_time")

  lastLoginIp String?    @map("last_login_ip")
  socialIds   Json?      @default("{}") @map("social_ids")
  authCode    String     @map("auth_code")
  apiTokens   ApiToken[]
  oauths      OAuth[]

  created  DateTime  @default(now()) @map("created_at")
  modified DateTime? @updatedAt @map("updated_at")
}

model ApiToken {
  id      String    @id @default("")
  userId  String
  created DateTime  @default(now())
  token   String
  expired DateTime?
  name    String    @unique
  user    User      @relation(fields: [userId], references: [id])
}

model OAuth {
  id       String @id @default("")
  userId   String
  platform String
  oauthId  String
  user     User   @relation(fields: [userId], references: [id])
}

model Post {
  id         String    @id @default("")
  slug       String
  text       String
  title      String    @db.VarChar(255)
  created    DateTime  @default(now()) @map("created_at")
  modified   DateTime? @updatedAt @map("updated_at")
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  @@unique([slug, categoryId])
  @@index([slug])
  @@index([created])
}

model Category {
  id      String   @id @default("")
  name    String   @unique
  slug    String   @unique
  created DateTime @default(now()) @map("created_at")
  Post    Post[]

  @@index([slug], name: "slugIndex")
}

model Tag {
  id      String   @id @default("")
  name    String   @unique
  created DateTime @default(now()) @map("created_at")
}
