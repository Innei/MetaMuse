// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"

  allowAny = false
}

generator zod-prisma-types {
  provider                         = "zod-prisma-types"
  output                           = "./zod" // default is ./generated/zod
  useMultipleFiles                 = true // default is false
  writeBarrelFiles                 = true // default is true
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = false // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is false
  createOptionalDefaultValuesTypes = true // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = false // default is false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default("")
  username String @unique @db.VarChar(80)
  name     String @db.VarChar(80)

  /// @zod.string.max(255)
  introduce String? @db.VarChar(255)
  /// @zod.string.url()
  avatar    String? @db.VarChar(1024)
  password  String  @db.VarChar(80)
  /// @zod.string.email()
  mail      String? @db.VarChar(80)
  /// @zod.string.url()
  url       String? @db.VarChar(1024)
  socialIds Json?   @default("{}") @map("social_ids")

  lastLoginTime DateTime?  @map("last_login_time")
  lastLoginIp   String?    @map("last_login_ip")
  apiTokens     ApiToken[]
  oauths        OAuth[]

  created  DateTime  @default(now()) @map("created_at")
  modified DateTime? @updatedAt @map("updated_at")
}

model ApiToken {
  id      String    @id @default("")
  userId  String
  created DateTime  @default(now())
  token   String
  expired DateTime?
  name    String    @unique
  user    User      @relation(fields: [userId], references: [id])
}

model OAuth {
  id       String @id @default("")
  userId   String
  platform String
  oauthId  String
  user     User   @relation(fields: [userId], references: [id])
}

model PostTag {
  id     String   @id @default("")
  name   String   @unique
  Post   Post[]
  postId String[]
}

model Post {
  id         String    @id @default("")
  /// @zod.string.max(255)
  slug       String    @db.VarChar(255)
  text       String
  /// @zod.string.max(80)
  title      String    @db.VarChar(255)
  created    DateTime  @default(now()) @map("created_at")
  modified   DateTime? @map("updated_at")
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  copyright  Boolean   @default(true)

  allowComment  Boolean   @default(true) @map("allow_comment")
  commentsIndex Int       @default(1) @map("comments_index")
  tags          PostTag[]

  summary String?

  /// [ArticleCount]
  count  Json @default("{\"read\": 0, \"like\": 0}") /// @zod.custom.omit(["model", "input"])
  /// [ArticleImages]
  images Json @default("[]")

  pin Boolean @default(false)

  related   Post[] @relation("RelatedPosts")
  relatedBy Post[] @relation("RelatedPosts")

  meta Json? @default("{}") /// @zod.custom.omit(["model", "input"])

  isPublished Boolean @default(true) @map("is_published")

  @@unique([slug, categoryId])
  @@index([slug])
  @@index([created])
}

model Category {
  id      String   @id @default("")
  /// @zod.string.max(80)
  name    String   @unique
  /// @zod.string.max(255)
  slug    String   @unique
  created DateTime @default(now()) @map("created_at")
  Post    Post[]

  @@index([slug], name: "slugIndex")
}

model ConfigKV {
  id    String @id @default("")
  key   String @unique
  value String
  scope String

  @@unique([key, scope])
}

model Note {
  id  String @id @default("")
  nid Int    @unique @default(autoincrement())

  text     String
  /// @zod.string.max(80)
  title    String    @db.VarChar(255)
  created  DateTime  @default(now()) @map("created_at")
  modified DateTime? @map("updated_at")

  commentsIndex Int     @default(1) @map("comments_index")
  allowComment  Boolean @default(true) @map("allow_comment")

  password    String     @default("")
  publicAt    DateTime?  @map("public_at")
  mood        String?
  weather     String?
  /// [NoteCoordinates]
  coordinates Json?
  location    String?
  topic       NoteTopic? @relation(fields: [topicId], references: [id])
  hasMemory   Boolean    @default(false) @map("has_memory")

  /// [ArticleCount]
  count  Json  @default("{\"read\": 0, \"like\": 0}") /// @zod.custom.omit(["model", "input"])
  /// [ArticleImages]
  images Json  @default("[]")
  meta   Json? @default("{}") /// @zod.custom.omit(["model", "input"])

  isPublished Boolean @default(true) @map("is_published")
  topicId     String?

  @@index([created])
  @@index([nid])
}

model NoteTopic {
  id          String   @id @default("")
  created     DateTime @default(now()) @map("created_at")
  description String   @default("")
  introduce   String   @default("")
  name        String   @unique
  slug        String   @unique
  icon        String?
  Note        Note[]
}

model Page {
  id       String    @id @default("")
  /// @zod.string.max(255)
  slug     String    @db.VarChar(255)
  /// @zod.string.max(80)
  subtitle String    @default("") @db.VarChar(80)
  text     String
  /// @zod.string.max(80)
  title    String    @db.VarChar(255)
  created  DateTime  @default(now()) @map("created_at")
  modified DateTime? @map("updated_at")

  order Int @default(0)

  allowComment  Boolean @default(true) @map("allow_comment")
  commentsIndex Int     @default(1) @map("comments_index")

  /// [ArticleCount]
  count  Json @default("{\"read\": 0, \"like\": 0}") /// @zod.custom.omit(["model", "input"])
  /// [ArticleImages]
  images Json @default("[]")

  meta Json? @default("{}") /// @zod.custom.omit(["model", "input"])

  @@index([slug])
  @@index([created])
}

model Recently {
  id      String  @id @default("")
  content String
  refId   String? // This represents the _id from the RefType. Adjust as needed.
  refType String
  up      Int     @default(0)
  down    Int     @default(0)
}

model Comment {
  id            String          @id @default("")
  created       DateTime        @default(now()) @map("created_at")
  refId         String          @map("ref_id")
  refType       CommentRefTypes @map("ref_type")
  author        String
  /// @zod.string.email()
  mail          String?
  /// @zod.string.url()
  url           String?
  text          String
  state         CommentState?   @default(UNREAD)
  parentId      String?
  parent        Comment?        @relation("CommentToComment", fields: [parentId], references: [id])
  children      Comment[]       @relation("CommentToComment")
  commentsIndex Int?            @default(1) @map("comments_index")
  key           String?
  ip            String?
  agent         String?
  pin           Boolean?        @default(false)
  location      String?
  isWhispers    Boolean?        @default(false) @map("is_whispers")
  source        String?
  avatar        String?
}

enum CommentRefTypes {
  Post
  Note
  Page
  Recently
}

enum CommentState {
  UNREAD
  READ
  SPAM
}
