// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

generator json {
  provider  = "prisma-json-types-generator"
  namespace = "PrismaJson"

  allowAny = false
}

generator zod-prisma-types {
  provider                         = "zod-prisma-types"
  output                           = "./zod" // default is ./generated/zod
  useMultipleFiles                 = true // default is false
  writeBarrelFiles                 = true // default is true
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = false // default is true
  addIncludeType                   = false // default is true
  addSelectType                    = false // default is true
  validateWhereUniqueInput         = false // default is false
  createOptionalDefaultValuesTypes = true // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = false // default is false
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default("")
  username  String  @unique @db.VarChar(80)
  name      String  @db.VarChar(80)
  introduce String? @db.VarChar(255)
  avatar    String? @db.VarChar(1024)
  password  String  @db.VarChar(80)
  mail      String? @db.VarChar(80)
  url       String? @db.VarChar(1024)
  socialIds Json?   @default("{}") @map("social_ids")

  lastLoginTime DateTime?  @map("last_login_time")
  lastLoginIp   String?    @map("last_login_ip")
  authCode      String     @map("auth_code")
  apiTokens     ApiToken[]
  oauths        OAuth[]

  created  DateTime  @default(now()) @map("created_at")
  modified DateTime? @updatedAt @map("updated_at")
}

model ApiToken {
  id      String    @id @default("")
  userId  String
  created DateTime  @default(now())
  token   String
  expired DateTime?
  name    String    @unique
  user    User      @relation(fields: [userId], references: [id])
}

model OAuth {
  id       String @id @default("")
  userId   String
  platform String
  oauthId  String
  user     User   @relation(fields: [userId], references: [id])
}

model PostImage {
  id     String @id @default("")
  src    String
  width  Float
  height Float
  accent String

  type   String  @map("mine_type")
  Post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?
}

model PostTag {
  id     String  @id @default("")
  name   String  @unique
  Post   Post?   @relation(fields: [postId], references: [id])
  postId String?
}

model Post {
  id         String      @id @default("")
  /// @zod.string.max(255)
  slug       String      @db.VarChar(255)
  text       String
  /// @zod.string.max(80)
  title      String      @db.VarChar(255)
  created    DateTime    @default(now()) @map("created_at")
  modified   DateTime?   @updatedAt @map("updated_at")
  categoryId String
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  images     PostImage[]
  copyright  Boolean     @default(true)

  allowComment Boolean   @default(true) @map("allow_comment")
  tags         PostTag[]

  /// [ArticleCount]
  count Json @default("{\"read\": 0, \"like\": 0}") /// @zod.custom.omit(["model", "input"])

  pin Boolean @default(false)

  // / @zod.array(zod.string()).optional()
  related   Post[] @relation("RelatedPosts")
  relatedBy Post[] @relation("RelatedPosts")

  meta Json? @default("{}") /// @zod.custom.omit(["model", "input"])

  isPublished Boolean @default(false) @map("is_published")

  @@unique([slug, categoryId])
  @@index([slug])
  @@index([created])
}

model Category {
  id      String   @id @default("")
  /// @zod.string.max(80)
  name    String   @unique
  /// @zod.string.max(255)
  slug    String   @unique
  created DateTime @default(now()) @map("created_at")
  Post    Post[]

  @@index([slug], name: "slugIndex")
}
